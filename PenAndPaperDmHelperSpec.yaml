openapi: 3.0.3
info:
  title: PenAndPaperDmHelper
  description: PenAndPaperDmHelper. Should serve as a template to get to know different technologies and besides have a cool interface as DM.
  version: 1.0.0
servers:
  - url: 'https://localhost'
components:
  schemas:

    chapter:
      type: object
      properties:
        name:
          description: Header of this chapter. Has to be unique.
          type: string
          example: Chapter One - The killing of the dragon
        records:
          description: An ordered array of records that should be displayed for.
          type: array
          items:
            $ref: '#/components/schemas/record'

    record:
      anyOf:
        - $ref: '#/components/schemas/text'
        - $ref: '#/components/schemas/picture'
        - $ref: '#/components/schemas/environment-lightning'
        - $ref: '#/components/schemas/chapter-link'

    text:
      type: string
      description: A record content in form of a text. Markdown is allowed.
      example: The heroes gather around the dragon. Roll **100** for instant kill.


    picture:
      type: object
      description: A record content as image encoded in Base64.
      properties:
        base64:
          type: string
          format: base64
          example: iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACuUExURf7+/v///0tLSyYmJmFhYQAAAMXFxQMDA9jY2HR0dCUlJRoaGs/Pz+vr62ZmZhMTE0lJSf39/cvLy4ODgxUVFWpqalZWVufn5w0NDRcXF/X19fr6+nZ2dkpKSiMjIzAwMKWlpVJSUgEBARQUFPf39wgICO3t7ZSUlIeHh8DAwHFxcdLS0h0dHR8fH319feXl5fj4+AQEBAICAqKioujo6EFBQeDg4MrKyrGxsfz8/PfHJHQAAAAJcEhZcwAAAxMAAAMTAT1mg8cAAADsSURBVChTlZBZQ8JADIQnwiCCoALigVziBQrK4fX//5g5ui194MGv7SSTbTfp4jCil99KpEny1UhK4hxVqszSMl6teVrmuO7hxDVhfRtE85St+LLUpn3Gc0gT3J/OIS463R5x6a7rGqSp+iZXuHbjpBWPxI0bQ7Si+7Ys3g7kblhMMLJEhxxPIFPcz4oJHiIoj3ginjNjvJjMFyqvwBvaZv2MZajPcsyV/orI+4eVYhFYZ51MNlEKRGe1umCbH0TOjvzskfzKfKIDEt9rlQLrJugPfn4hG6E7l7TnzM5BRlNvt9fGknitkP8D/AFltgj68usxWAAAAABJRU5ErkJggg==
        file-format:
          type: string
          example: png
        is-shareable-with-group:
          type: boolean
          example: true
          description: Describes if this picture is just for the DM or meant to be shown to the group.


    environment-lightning:
      type: object
      description: A record content in form of a description of environment lightning.
      properties:
        rgb:
          description: An array containing in this order red green blue parts of the colour to be shown.
          type: array
          minLength: 3
          maxLength: 3
          items:
            type: integer
            minimum: 0
            maximum: 255
          example: [ 255, 230, 0 ]
        brightness:
          description: A fractal between 0 and 1 which represents the brightness level of the environment lightning.
          type: number
          minimum: 0
          maximum: 1
          example: 0.5

    chapter-link:
      type: object
      description: A link to another chapter.
      properties:
        chapter-name:
          type: string
          example: Chapter 02 - The big bad wolf

paths:
  /chapter/{name}:
    parameters:
      - name: name
        in: path
        description: Name of the chapter.
        schema:
          type: string
        required: true
        example: Chapter 01 - The killing of the dragon


    get:
      tags:
        - chapters
      parameters:
        - name: name
          in: path
          schema:
            type: string
          description: Name of the chapter. If empty, then all chapters are returned.
          required: false
          allowEmptyValue: true
          example: Chapter 01 - The killing of the dragon
      description: Returns a chapter object.
      operationId: getChapterByName
      responses:
        200:
          description: A chapter object could be found. If parameter `name` is not given and there are no `chapter`s,
            an empty array will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chapter'
        404:
          description: If parameter `name` is given and a chapter by that name could not be found.


    put:
      tags:
        - chapters
      description: Creates a new `chapter` with a name.
      operationId: putChapterByName
      responses:
        200:
          description: A new chapter is created.
        400:
          description: A chapter by that name already exists.


    delete:
      tags:
        - chapters
      description: Deletes the `chapter` by that name
      operationId: deleteChapterByName
      responses:
        200:
          description: The `chapter` is deleted.
        404:
          description: A `chapter` with that name does not exist.


    patch:
      tags:
        - chapters
      description: Updates the `chapter`
      operationId: patchChapterByName
      requestBody:
        description: The new name for the `chapter`.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: Chapter 01 - The killing of the group
      responses:
        200:
          description: The name of the chapter is updated.
        400:
          description: A chapter with the new name already exists.
        404:
          description: A chapter with that name does not exist.

  /record/{chapter}/{index}:
    parameters:
      - name: chapter
        in: path
        description: The name of the chapter in which the record is.
        schema:
          type: string
        required: true
        example: Chapter 01 - The killing of the dragon
      - name: index
        in: path
        description: Index of the record in the chapter.
        schema:
          type: integer
          minimum: 0
        required: false
        example: 0
        allowEmptyValue: true

    get:
      tags:
        - records
      description: Returns a `record`. If no index is given, then all `record`s of this `chapter` are returned.
      operationId: getRecordByChapterAndIndex
      responses:
        200:
          description: There is a `chapter` by that name. Return value is possibly an empty array,
            if there are no `record`s in this chapter.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/record'

        404:
          description: There is no `chapter` by that name.

    patch:
      tags:
        - records
      description: Updates the `record` by that `index` in that `chapter`.
      parameters:
        - name: index
          in: path
          description: Index of the record in the chapter.
          schema:
            type: integer
            minimum: 0
          required: true
          example: 0
      responses:
        200:
          description: Specified `record` is updated.
        404:
          description: There is no `record` by that `index` or no `chapter` by that `name`.

    delete:
      tags:
        - records
      description: Deletes the `record` by that `index` in that `chapter`. If no `index` is 
                   given, all `record`s in this `chapter` will be deleted.
      responses:
        200:
          description: Specified `record`(s) are deleted.
          content:
            application/json:
              schema:
                description: Number of `record`s deleted.
                example: 120
                type: integer
        404:
          description: There is no `record` by that `index` or no `chapter` by that `name`.






