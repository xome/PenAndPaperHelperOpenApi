openapi: 3.0.3
info:
  title: PenAndPaperDmHelper
  description: PenAndPaperDmHelper. Should serve as a template to get to know different technologies and besides have a cool interface as DM.
  version: 1.0.0
  contact:
    email: nope@nope.com
servers:
  - url: 'https://localhost'
tags:
  - name: Adventure
    description: Operations concernoing `adventure`s.
  - name: Chapter
    description: All operations concerning a chapter.
  - name: Record
    description: All operations concerning a single record.
  - name: Chapter without name path parameter
    description: Operations concerning chapters. Chapter is described in Request Body.
  - name: Multiple records
    description: Operations concerning multiple records.
  - name: Graph
    description: Operations concerning `graph`s.
components:
  parameters:
    chapterName:
      name: chapterName
      in: path
      description: The name of the chapter.
      schema:
        type: string
      required: true
      example: Chapter 01 - The killing of the dragon

    adventureName:
      name: adventureName
      in: path
      description: The name of the adventure.
      schema:
        type: string
      required: true
      example: A man's best friend



  schemas:

    adventure:
      type: object
      description: An adventure holding all `chapters`.
      properties:
        name:
          description: Name of the adventure.
          type: string
          example: A man's best friend
          nullable: false
        chapters:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/chapter'

    chapter:
      type: object
      description: A chapter contains records.
      properties:
        name:
          description: Header of this chapter. Has to be unique.
          type: string
          example: Chapter 01 - The killing of the dragon
          nullable: false
        subheader:
          description: Subheader of this chapter.
          type: string
          nullable: true
          example: Or is it the killing of the group
        approximateDurationInMinutes:
          description: How long will the group need for this `chapter`?
          type: number
          nullable: true
          example: 30
        records:
          example:
            - The heroes gather around the dragon.
            - Roll **50** to not die.
            - Roll **100** to win.
          description: An ordered array of records that should be displayed for.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/record'

    record:
      anyOf:
        - $ref: '#/components/schemas/text'
        - $ref: '#/components/schemas/picture'
        - $ref: '#/components/schemas/environmentLightning'
        - $ref: '#/components/schemas/chapterLinkRecord'
        - $ref: '#/components/schemas/backgroundMusic'

    text:
      type: string
      nullable: false
      description: A record content in form of a text. Markdown is allowed.
      example: The heroes gather around the dragon. Roll **100** for instant kill.


    picture:
      type: object
      description: A record content as image encoded in Base64.
      properties:
        base64:
          nullable: false
          type: string
          format: base64
          example: iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACuUExURf7+/v///0tLSyYmJmFhYQAAAMXFxQMDA9jY2HR0dCUlJRoaGs/Pz+vr62ZmZhMTE0lJSf39/cvLy4ODgxUVFWpqalZWVufn5w0NDRcXF/X19fr6+nZ2dkpKSiMjIzAwMKWlpVJSUgEBARQUFPf39wgICO3t7ZSUlIeHh8DAwHFxcdLS0h0dHR8fH319feXl5fj4+AQEBAICAqKioujo6EFBQeDg4MrKyrGxsfz8/PfHJHQAAAAJcEhZcwAAAxMAAAMTAT1mg8cAAADsSURBVChTlZBZQ8JADIQnwiCCoALigVziBQrK4fX//5g5ui194MGv7SSTbTfp4jCil99KpEny1UhK4hxVqszSMl6teVrmuO7hxDVhfRtE85St+LLUpn3Gc0gT3J/OIS463R5x6a7rGqSp+iZXuHbjpBWPxI0bQ7Si+7Ys3g7kblhMMLJEhxxPIFPcz4oJHiIoj3ginjNjvJjMFyqvwBvaZv2MZajPcsyV/orI+4eVYhFYZ51MNlEKRGe1umCbH0TOjvzskfzKfKIDEt9rlQLrJugPfn4hG6E7l7TnzM5BRlNvt9fGknitkP8D/AFltgj68usxWAAAAABJRU5ErkJggg==
        fileFormat:
          type: string
          nullable: false
          example: png
        isShareableWithGroup:
          type: boolean
          nullable: false
          example: true
          description: Describes if this picture is just for the DM or meant to be shown to the group.


    environmentLightning:
      type: object
      description: A record content in form of a description of environment lightning.
      properties:
        rgb:
          description: An array containing in this order red green blue parts of the colour to be shown.
          type: array
          nullable: false
          minLength: 3
          maxLength: 3
          items:
            type: integer
            minimum: 0
            maximum: 255
          example: [ 255, 230, 0 ]
        brightness:
          description: A fractal between 0 and 1 which represents the brightness level of the environment lightning.
          type: number
          nullable: false
          minimum: 0
          maximum: 1
          example: 0.5

    chapterLinkRecord:
      type: object
      description: A link to another chapter.
      properties:
        chapterNameTo:
          type: string
          nullable: false
          example: Chapter 02 - The big bad wolf

    backgroundMusic:
      type: object
      description: Background Music
      properties:
        name:
          type: string
          nullable: false
          example: "Market ambient sound"
        data:
          type: string
          format: binary
          nullable: false
          example: OggS1/OpusHead]OggS

    graph:
      type: object
      description: A `graph` consists of `chapters` as vertices and `chapterLink`s as edges.
        It is a directed Graph. The direction of a edge is described in the `chapterLink`.
      properties:
        chapters:
          type: array
          items:
            type: string
            description: Name of all `chapter`s.
        chapterLinks:
          type: array
          items:
            $ref: '#/components/schemas/chapterLink'

    path:
      type: object
      description: A `path` navigating the `graph` is a sequence of `chapter`s.
        For each `chapter` in the sequence with the index *n*
        there exists a `chapterLink`, which `chapterNameFrom` is the `chapter` *n*
        and `chapterNameTo` is the `chapter` with the index *n + 1*.
        
        If there is no `chapter` with the index *n + 1*, `chapter` n is a possible ending of the adventure.
        If there exists no `path` for a `chapter` with the index *n* with a arbitrary `chapter` with the index *n-1*,
        `chapter` n is a possible starting point.
        If a `path` holds the same `chapter` more than once, it is called a circle.
        If there is at least one circle, the `graph` is invalid.
        The minimum size of a `path` is 1.
        The maximum size of a valid `path` is the number of `chapter`s.
      properties:
        chapters:
          description: Sequence of `chapter`s.
          type: array
          items:
            type: string
          example:
            - The cute little puppy
            - The big bad hound
            - First day at Dog School
        approximateDurationInMinutes:
          description: Sum of approximate durations of each `chapter` in the path.
          type: number
          example: 90

    chapterLink:
      type: object
      properties:
        from:
          type: string
          nullable: false
          example: Chapter 01 - The small cute puppy
        to:
          type: string
          nullable: false
          example: Chapter 02 - The big bad wolf



  examples:
    justOnePossiblePath:
      description: There is just one path with the desired properties.
      value:
        - chapters:
            - The cute little puppy
            - The big bad hound
            - First day at Dog School
          approximateDurationInMinutes: 90
    multiplePossiblePathsWithSameDuration:
      description: There are multiple paths with the desired properties.
      value:
        - chapters:
            - The cute little puppy
            - The big bad hound
            - First day at Dog School
          approximateDurationInMinutes: 90
        - chapters:
            - The cute little puppy
            - The big bad hound
            - The shelter
          approximateDurationInMinutes: 90

  responses:
    graphCouldNotBeConstructed:
      description: A valid `graph` could not be constructed. Problematic `path`s are described in the body.
                   If no `path`s are returned, all `path`s are invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the problem
                example: Graph is invalid. There are only Paths with circles.
              problematicPaths:
                type: array
                description: Problematic `path`s
                items:
                  $ref: '#/components/schemas/path'
    noAdventureByThatName:
      description: There is no `adventure` by that name

paths:

  /adventures:
    get:
      tags:
        - Adventure
      description: Get the names of all available `adventure`s.
      responses:
        "200":
          description: There are adventures available.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - A man's best friend
                  - Dragon layer 3

  /adventure/{adventureName}:
    parameters:
      - $ref: '#/components/parameters/adventureName'

    delete:
      tags:
        - Adventure
      description: Delete an `adventure`.
      responses:
        "200":
          description: Adventure was deleted.
        "404":
          description: There was no `adventure` by that name.

    put:
      tags:
        - Adventure
      description: Create a new `adventure`.
      responses:
        "200":
          description: The `adventure` was created.
        "400":
          description: There already is an `adventure` by that name.

    patch:
      tags:
        - Adventure
      description: Rename an `adventure`.
      requestBody:
        required: true
        description: The new `name` for the `adventure`.
        content:
          application/json:
            schema:
              type: string
            example: A man's best fiend

      responses:
        "200":
          description: The `adventure` was renamed.
        "400":
          description: There already was an `adventure` by that name.


  /chapter/{adventureName}/{chapterName}:
    parameters:
      - $ref: '#/components/parameters/adventureName'
      - $ref: '#/components/parameters/chapterName'

    get:
      tags:
        - Chapter
      description: Returns a chapter object.
      operationId: chapters_getByName
      responses:
        "200":
          description: A chapter object could be found. If parameter `name` is not given and there are no `chapter`s,
            an empty array will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chapter'
        "404":
          description: If parameter `name` is given and a chapter by that name could not be found.

    patch:
      tags:
        - Chapter
      description: Updates the `chapter`. If a attribute has a null value, it is not updated
      operationId: chapters_patchByName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chapter'
            examples:
              A full blown chapter:
                $ref: '#/components/schemas/chapter'
              Just update the subheader:
                value:
                  name: Chapter 01 - The killing of the dragon
                  subheader: Introduction Chapter
                  records: null
              Delete all records for the chapter:
                value:
                  name: null
                  subheader: null
                  records: [ ]
      responses:
        "200":
          description: The name of the chapter is updated.
        "400":
          description: A chapter with the new name already exists.
        "404":
          description: A chapter with that name does not exist.

    delete:
      tags:
        - Chapter
      description: Deletes the `chapter` by that name
      operationId: chapters_deleteByName
      responses:
        "200":
          description: The `chapter` is deleted.
        "404":
          description: A `chapter` with that name does not exist.

  /chapter/{adventureName}:

    parameters:
      - $ref: '#/components/parameters/adventureName'

    put:
      tags:
        - Chapter
        - Chapter without name path parameter
      description: Creates a new `chapter` with a name. If a `chapter` `name` is given in the request body
        and it conflicts with the path parameter, the path parameter is used.
      operationId: chapters_put
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chapter'
            examples:
              A full blown chapter:
                $ref: '#/components/schemas/chapter'
              No Subheader or records:
                value:
                  name: Other chapter name than given in path parameter
                  subheader: null
                  records: null
      responses:
        "200":
          description: A new chapter is created.
        "400":
          description: A chapter by that name already exists.

    patch:
      tags:
        - Chapter
        - Chapter without name path parameter
      description: Updates the `chapter`. If a attribute has a null value, it is not updated.
        Attribute `name` value has to be a name of a existing `chapter`.
        If a `chapter` has to be renamed, the patch operation with name parameter should be used.
      operationId: chapters_patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chapter'
            examples:
              A full blown chapter:
                $ref: '#/components/schemas/chapter'
              Just update the subheader:
                value:
                  name: Chapter 01 - The killing of the dragon
                  subheader: Introduction Chapter
                  records: null
              Delete all records:
                value:
                  name: Chapter 01 - The killing of the dragon
                  subheader: null
                  records: [ ]
      responses:
        "200":
          description: The `chapter` is updated.
        "404":
          description: A `chapter` with that name does not exist.

  /record/{adventureName}/{chapterName}:
    parameters:
      - $ref: '#/components/parameters/adventureName'
      - $ref: '#/components/parameters/chapterName'

    get:
      tags:
        - Record
        - Multiple records
      responses:
        "200":
          description: There is a `chapter` by that name. All `record`s associated with that `chapter` are returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/record'
        "404":
          description: There is no `chapter` by that name.

    delete:
      tags:
        - Record
        - Multiple records
      responses:
        "200":
          description: All `record`s described in the request body are deleted.
            If no `record` is given, all `record`s of the `chapter` are deleted.
        "404":
          description: There is no `chapter` by that name.
      requestBody:
        description: The `record`s to be deleted.
        required: false
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/record'

  /record/{adventureName}/{chapterName}/{index}:
    parameters:
      - $ref: '#/components/parameters/adventureName'
      - $ref: '#/components/parameters/chapterName'
      - name: index
        in: path
        description: Index of the record in the chapter.
        schema:
          type: integer
          minimum: 0
        required: true
        example: 0
        allowEmptyValue: true

    get:
      tags:
        - Record
      description: Returns a `record`.
      operationId: getRecordByChapterAndIndex
      responses:
        "200":
          description: There is a `chapter` by that name and a `record` by that index. 
            if there are no `record`s in this chapter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/record'

        "404":
          description: There is no `record` by that index or no `chapter` by that name.
    put:
      tags:
        - Record
      operationId: records_putByChapterAndIndex
      description: Inserts a new `record` at that `index` in that `chapter`.
        If no `index` is given, then it is appended to the end.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/record'
            examples:
              text:
                value:
                  "The heroes gather around the dragon. Roll **100** to not be instantly killed."
              chapterLink:
                value:
                  chapterName: "Chapter 03 - Another chance"
              picture:
                value:
                  base64: iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACuUExURf7+/v///0tLSyYmJmFhYQAAAMXFxQMDA9jY2HR0dCUlJRoaGs/Pz+vr62ZmZhMTE0lJSf39/cvLy4ODgxUVFWpqalZWVufn5w0NDRcXF/X19fr6+nZ2dkpKSiMjIzAwMKWlpVJSUgEBARQUFPf39wgICO3t7ZSUlIeHh8DAwHFxcdLS0h0dHR8fH319feXl5fj4+AQEBAICAqKioujo6EFBQeDg4MrKyrGxsfz8/PfHJHQAAAAJcEhZcwAAAxMAAAMTAT1mg8cAAADsSURBVChTlZBZQ8JADIQnwiCCoALigVziBQrK4fX//5g5ui194MGv7SSTbTfp4jCil99KpEny1UhK4hxVqszSMl6teVrmuO7hxDVhfRtE85St+LLUpn3Gc0gT3J/OIS463R5x6a7rGqSp+iZXuHbjpBWPxI0bQ7Si+7Ys3g7kblhMMLJEhxxPIFPcz4oJHiIoj3ginjNjvJjMFyqvwBvaZv2MZajPcsyV/orI+4eVYhFYZ51MNlEKRGe1umCbH0TOjvzskfzKfKIDEt9rlQLrJugPfn4hG6E7l7TnzM5BRlNvt9fGknitkP8D/AFltgj68usxWAAAAABJRU5ErkJggg==
                  fileFormat: png
                  isShareableWithGroup: true
              environmentLightning:
                value:
                  rgb: [ 0, 0, 255 ]
                  brightness: 0.8
      responses:
        "200":
          description: Specified `record` is updated.
        "404":
          description: There is no `record` by that `index` or no `chapter` by that `name`.

    patch:
      tags:
        - Record
      operationId: records_patchByChapterAndIndex
      description: Updates the `record` by that `index` in that `chapter`.
      parameters:
        - name: index
          in: path
          description: Index of the record in the chapter.
          schema:
            type: integer
            minimum: 0
          required: true
          example: 8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/record'
            examples:
              text:
                value:
                  "Roll **50** to not get discovered."
              picture:
                value:
                  base64: iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAMAAADzN3VRAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACuUExURf7+/v///0tLSyYmJmFhYQAAAMXFxQMDA9jY2HR0dCUlJRoaGs/Pz+vr62ZmZhMTE0lJSf39/cvLy4ODgxUVFWpqalZWVufn5w0NDRcXF/X19fr6+nZ2dkpKSiMjIzAwMKWlpVJSUgEBARQUFPf39wgICO3t7ZSUlIeHh8DAwHFxcdLS0h0dHR8fH319feXl5fj4+AQEBAICAqKioujo6EFBQeDg4MrKyrGxsfz8/PfHJHQAAAAJcEhZcwAAAxMAAAMTAT1mg8cAAADsSURBVChTlZBZQ8JADIQnwiCCoALigVziBQrK4fX//5g5ui194MGv7SSTbTfp4jCil99KpEny1UhK4hxVqszSMl6teVrmuO7hxDVhfRtE85St+LLUpn3Gc0gT3J/OIS463R5x6a7rGqSp+iZXuHbjpBWPxI0bQ7Si+7Ys3g7kblhMMLJEhxxPIFPcz4oJHiIoj3ginjNjvJjMFyqvwBvaZv2MZajPcsyV/orI+4eVYhFYZ51MNlEKRGe1umCbH0TOjvzskfzKfKIDEt9rlQLrJugPfn4hG6E7l7TnzM5BRlNvt9fGknitkP8D/AFltgj68usxWAAAAABJRU5ErkJggg==
                  fileFormat: png
                  isShareableWithGroup: true
              chapterLink:
                value:
                  chapterName: "Chapter 03 - Another chance"
              environmentLightning:
                value:
                  rgb: [ 0, 0, 255 ]
                  brightness: 0.8

      responses:
        "200":
          description: Specified `record` is updated.
        "404":
          description: There is no `record` by that `index` or no `chapter` by that `name`.

    delete:
      tags:
        - Record
      operationId: records_deleteByChapterAndIndex
      description: Deletes the `record` by that `index` in that `chapter`. If no `index` is
        given, all `record`s in this `chapter` will be deleted.
      responses:
        "200":
          description: Specified `record`(s) are deleted.
          content:
            application/json:
              schema:
                description: Number of `record`s deleted.
                example: 120
                type: integer
        "404":
          description: There is no `record` by that `index` or no `chapter` by that `name`.

  /graph/{adventureName}:
    parameters:
      - $ref: '#/components/parameters/adventureName'

    get:
      tags:
        - Graph
      description: Get the `graph` describing the whole adventure.
      responses:
        "200":
          description: A valid `graph` can be constructed. A `graph` is valid when there are no invalid `path`s.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/graph'
              examples:
                An adventure with only one chapter:
                  value:
                    chapters:
                      - Short adventure
                An adventure with multiple chapters:
                  value:
                    chapters:
                      - Chapter 01 - The cute little puppy
                      - Chapter 02 - The big bad wolf
                    chapterLinks:
                      - chapterNameFrom: Chapter 01 - The cute little puppy
                        chapterNameTo: Chapter 02 - The big bad wolf
                An adventure with multiple starting points:
                  value:
                    chapters:
                      - The cute little puppy
                      - The big bad wolf
                      - The shelter
                    chapterLinks:
                      - chapterNameFrom: The cute little puppy
                        chapterNameTo: The shelter
                      - chapterNameFrom: The big bad wolf
                        chapterNameTo: The shelter

                An adventure with multiple ending points:
                  value:
                    chapters:
                      - The big bad hound
                      - The shelter
                      - First day at dog school
                    chapterLinks:
                      - chapterNameFrom: The big bad hound
                        chapterNameTo: The shelter
                      - chapterNameFrom: The big bad hound
                        chapterNameTo: First day at dog school
        "417":
          $ref: '#/components/responses/graphCouldNotBeConstructed'
        "404":
          $ref: '#/components/responses/noAdventureByThatName'

  /paths/shortest/{adventureName}:

    parameters:
      - $ref: '#/components/parameters/adventureName'

    get:
      tags:
        - Graph
      description: Get the shortest possible `path`s in the `graph`.
      responses:
        "200":
          description: A valid `graph` can be constructed. The shortest `path` is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/path'
        "417":
          $ref: '#/components/responses/graphCouldNotBeConstructed'
        "404":
          $ref: '#/components/responses/noAdventureByThatName'

  /paths/longest/{adventureName}:

    parameters:
      - $ref: '#/components/parameters/adventureName'

    get:
      tags:
        - Graph
      description: Get the longest possible `path`s in the `graph`.
      responses:
        "200":
          description: A valid `graph` can be constructed. The longest `path` is returned.
          content:
            application/json:
              examples:
                Just one longest path:
                  $ref: '#/components/examples/justOnePossiblePath'
                Multiple possible longest paths:
                  $ref: '#/components/examples/multiplePossiblePathsWithSameDuration'
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/path'
        "417":
          $ref: '#/components/responses/graphCouldNotBeConstructed'
        "404":
          $ref: '#/components/responses/noAdventureByThatName'

  /paths/next/{adventureName}/{startingPoint}:

    parameters:
      - $ref: '#/components/parameters/adventureName'

    get:
      tags:
        - Graph
      description: Get the next possible `path`s starting with the given `chapter`.
      parameters:
        - name: startingPoint
          description: The `chapter`s `name` as ´startingPoint`.
          required: true
          in: path
          schema:
            type: string
          example: "Wishing for a friend"
      responses:
        "200":
          description: A valid `graph` can be constructed. The possible `path`s from the `startingPoint` are returned.
          content:
            application/json:
              examples:
                Just one possible path:
                  $ref: '#/components/examples/justOnePossiblePath'
                Multiple possible paths:
                  $ref: '#/components/examples/multiplePossiblePathsWithSameDuration'
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/path'
        "417":
          $ref: '#/components/responses/graphCouldNotBeConstructed'
        "404":
          $ref: '#/components/responses/noAdventureByThatName'







